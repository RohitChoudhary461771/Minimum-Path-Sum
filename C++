Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 â†’ 3 â†’ 1 â†’ 1 â†’ 1 minimizes the sum.


class Solution {
public:
    // int sum(vector<vector<int>>& grid,int m, int n,vector<vector<int>>&dp){
 // ðŸ‘‰ Memoization 
        
    //     if(m==0 && n==0)return grid[m][n];
    //     if(m<0 || n<0)return 1e9;
        
    //     if(dp[m][n]!=-1)return dp[m][n];
    //     int up=grid[m][n]+sum(grid,m-1,n,dp);
    //     int left=grid[m][n]+sum(grid,m,n-1,dp);
        
    //     return dp[m][n]=min(up,left);
    // }

    int minPathSum(vector<vector<int>>& grid) {
     // int m =grid.size();
     // int n=grid[0].size();
     // vector<vector<int>>dp(m,vector<int>(n,-1));
     // return sum(grid,m-1,n-1,dp);

//ðŸ‘‰ Tabulaztion 
     int m =grid.size();
     int n=grid[0].size();  
     
     vector<vector<int>>dp(m,vector<int>(n,-1));
     
     for(int i=0;i<m;i++){
         for(int j=0;j<n;j++){
             if(i==0 && j==0){
                 dp[i][j]=grid[i][j];
                 continue;}
             int left=1e9;
             int up=1e9;
             if(i>0){
                 up=dp[i-1][j]+grid[i][j];
             }
             if(j>0){
                left=dp[i][j-1]+grid[i][j];
             }
             dp[i][j]=min(up,left);
         }
     }
     return dp[m-1][n-1];

//ðŸ‘‰ space optimization

        int m =grid.size();
        int n=grid[0].size();  
        vector<int>prev(n,-1);
        
        for(int i=0;i<m;i++){
            vector<int>temp(n,-1);
            for(int j=0;j<n;j++){
                if(i==0 && j==0){
                    temp[j]=grid[i][j];
                    continue;
                }
                int left=1e9 ,up=1e9;
                if(i>0){
                    up=prev[j]+grid[i][j];
                }
                if(j>0){
                    left=temp[j-1]+grid[i][j];
                }
                temp[j]=min(up,left);
            }
            prev=temp;
        }
        return prev[n-1]   
    }
};
